import React, { useState, useMemo, memo } from "react";
import { 
  DndContext, 
  closestCenter, 
  useSensor, 
  useSensors, 
  PointerSensor, 
  DragOverlay 
} from '@dnd-kit/core';
import { 
  SortableContext, 
  verticalListSortingStrategy, 
  useSortable 
} from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';
import "./TaskList.css";

const SortableTask = memo(({ task, onStatusChange, onDeleteTask, onEditTask }) => {
  const {
    attributes,
    listeners,
    setNodeRef,
    setActivatorNodeRef,
    transform,
    transition,
    isDragging,
  } = useSortable({ 
    id: task.id,
    disabled: false
  });

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
    opacity: isDragging ? 0.5 : 1,
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const formatDate = (dateStr) => {
    const date = new Date(dateStr);
    const today = new Date();
    const tomorrow = new Date(today);
    tomorrow.setDate(today.getDate() + 1);
    
    // –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
  // –í–∞–∂–Ω–æ: dateStr –ø—Ä–∏—Ö–æ–¥–∏—Ç –±–µ–∑ Z, —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è; –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ –ª–æ–∫–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const time = date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
    
    if (date.toDateString() === today.toDateString()) {
      return `–°–µ–≥–æ–¥–Ω—è ${time}`;
    } else if (date.toDateString() === tomorrow.toDateString()) {
      return `–ó–∞–≤—Ç—Ä–∞ ${time}`;
    } else {
      return `${date.toLocaleDateString('ru-RU')} ${time}`;
    }
  };

  // –ò–∫–æ–Ω–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
  const getPriorityIcon = (priority) => {
    switch (priority) {
      case 'high': return 'üî•';
      case 'medium': return '‚ö°';
      case 'low': return 'üíé';
      default: return 'üìã';
    }
  };

  // –¶–≤–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'high': return '#ff3366';
      case 'medium': return '#ffaa00';
      case 'low': return '#00ff88';
      default: return '#666';
    }
  };

  // –ò–∫–æ–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const getCategoryIcon = (category) => {
    if (!category) return 'üìÅ';
    const categoryLower = category.toLowerCase();
    if (categoryLower.includes('—Ä–∞–±–æ—Ç')) return 'üíº';
    if (categoryLower.includes('–ª–∏—á–Ω')) return 'üë§';
    if (categoryLower.includes('—É—á–µ–±') || categoryLower.includes('–æ–±—Ä–∞–∑–æ–≤–∞–Ω')) return 'üìö';
    if (categoryLower.includes('–¥–æ–º') || categoryLower.includes('–±—ã—Ç')) return 'üè†';
    if (categoryLower.includes('–∑–¥–æ—Ä–æ–≤') || categoryLower.includes('—Å–ø–æ—Ä—Ç')) return 'üí™';
    if (categoryLower.includes('–ø–æ–∫—É–ø') || categoryLower.includes('–º–∞–≥–∞–∑–∏–Ω')) return 'üõí';
    if (categoryLower.includes('—Ñ–∏–Ω–∞–Ω—Å') || categoryLower.includes('–¥–µ–Ω—å–≥')) return 'üí∞';
    if (categoryLower.includes('–ø—É—Ç–µ—à') || categoryLower.includes('–ø–æ–µ–∑–¥–∫')) return '‚úàÔ∏è';
    if (categoryLower.includes('—Ö–æ–±–±–∏') || categoryLower.includes('—Ç–≤–æ—Ä—á')) return 'üé®';
    if (categoryLower.includes('—Å–µ–º—å')) return 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶';
    return 'üìÅ';
  };

  // –ß–µ–∫–±–æ–∫—Å ‚Äî –Ω–µ —Å–≤—è–∑–∞–Ω —Å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ–º
  const handleCheckboxChange = (e) => {
    e.stopPropagation();
    onStatusChange(task.id);
  };

  const handleDelete = (e) => {
    e.stopPropagation();
    onDeleteTask(task.id);
  };

  const handleEdit = (e) => {
    e.stopPropagation();
    onEditTask(task);
  };

  const blockDndForInteractive = (e) => {
    const target = e.target;
    if (
      target.closest?.('.task-checkbox') ||
      target.closest?.('.delete-btn') ||
      target.closest?.('.edit-btn') ||
      target.closest?.('.task-actions')
    ) {
      e.stopPropagation();
    }
  };

  return (
    <div
      ref={setNodeRef}
      style={style}
      className={`tg-task-item ${task.status ? 'completed' : ''} ${isDragging ? 'dragging' : ''}`}
      onPointerDownCapture={blockDndForInteractive}
      onMouseDownCapture={blockDndForInteractive}
    >
      <div 
        className="task-drag-handle"
        ref={setActivatorNodeRef}
        {...attributes}
        {...listeners}
        title="–ü–µ—Ä–µ—Ç–∞—â–∏—Ç—å –∑–∞–¥–∞—á—É"
      >
        <div className="drag-dots">
          <div className="dot"></div>
          <div className="dot"></div>
          <div className="dot"></div>
          <div className="dot"></div>
          <div className="dot"></div>
          <div className="dot"></div>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç ‚Äî –Ω–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ—Ç—Å—è */}
  <div className="task-content" onPointerDownCapture={blockDndForInteractive} onMouseDownCapture={blockDndForInteractive}>
        {/* –ß–µ–∫–±–æ–∫—Å ‚Äî –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω –æ—Ç DnD */}
        <div className="task-checkbox-container">
          <input
            type="checkbox"
            checked={!!task.status}
            onChange={handleCheckboxChange}
            className="task-checkbox"
            onClick={(e) => e.stopPropagation()}
            onPointerDown={(e) => e.stopPropagation()}
            onMouseDown={(e) => e.stopPropagation()}
          />
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ */}
        <div className="task-info">
          <div className="task-header">
            <h3 className="task-title">
              <span 
                className="priority-icon"
                style={{ color: getPriorityColor(task.priority) }}
              >
                {getPriorityIcon(task.priority)}
              </span>
              {task.title}
            </h3>
            <span className="task-priority" style={{ color: getPriorityColor(task.priority) }}>
              {task.priority}
            </span>
          </div>
          
          {task.description && (
            <p className="task-description">{task.description}</p>
          )}
          
          {task.date_time && (
            <div className="task-datetime">
              üìÖ {formatDate(task.date_time)}
            </div>
          )}
          
          {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è */}
          {task.category && (
            <div className="task-meta">
              <span className="task-category">
                {getCategoryIcon(task.category)} {task.category}
              </span>
            </div>
          )}
        </div>

        {/* –î–µ–π—Å—Ç–≤–∏—è ‚Äî –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã –æ—Ç DnD */}
        <div className="task-actions">
          <button
            className="edit-btn"
            onClick={handleEdit}
            onPointerDown={(e) => e.stopPropagation()}
            onMouseDown={(e) => e.stopPropagation()}
            title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É"
          >
            ‚úèÔ∏è
          </button>
          <button
            className="delete-btn"
            onClick={handleDelete}
            onPointerDown={(e) => e.stopPropagation()}
            onMouseDown={(e) => e.stopPropagation()}
            title="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"
          >
            üóëÔ∏è
          </button>
        </div>
      </div>
    </div>
  );
});

function TaskList({ theme, tasks = [], onTaskMove, onStatusChange, onDeleteTask, onEditTask }) {
  const [activeId, setActiveId] = useState(null);
  
  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 8,
        delay: 120,
        tolerance: 5,
      },
    })
  );

  const handleDragStart = (event) => {
    setActiveId(event.active.id);
  };

  const handleDragEnd = (event) => {
    const { active, over } = event;
    
    if (active.id !== over?.id) {
      onTaskMove(active.id, over.id);
    }
    
    setActiveId(null);
  };

  const handleDragCancel = () => {
    setActiveId(null);
  };

  // –ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è DragOverlay
  const activeTask = tasks.find(task => task.id === activeId);

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á –ø–æ –¥–Ω—è–º (–º–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
  const groupedTasks = useMemo(() => {
    const groups = {};
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);

    tasks.forEach(task => {
      let groupKey;
      let groupLabel;
      let sortOrder;
      
      if (!task.date_time) {
        groupKey = 'no-date';
        groupLabel = 'üìå –ë–µ–∑ —Å—Ä–æ–∫–∞';
        sortOrder = new Date(8640000000000000); // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
      } else {
        const taskDate = new Date(task.date_time);
        taskDate.setHours(0, 0, 0, 0);
        sortOrder = taskDate;
        
        if (taskDate.getTime() === today.getTime()) {
          groupKey = 'today';
          groupLabel = 'üî• –°–µ–≥–æ–¥–Ω—è';
        } else if (taskDate.getTime() === tomorrow.getTime()) {
          groupKey = 'tomorrow';
          groupLabel = '‚≠ê –ó–∞–≤—Ç—Ä–∞';
        } else if (taskDate < today) {
          groupKey = 'overdue';
          groupLabel = '‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ';
        } else {
          groupKey = taskDate.toISOString();
          groupLabel = `üìÖ ${taskDate.toLocaleDateString('ru-RU', { weekday: 'long', day: 'numeric', month: 'long' })}`;
        }
      }

      if (!groups[groupKey]) {
        groups[groupKey] = { label: groupLabel, tasks: [], sortOrder: sortOrder };
      }
      groups[groupKey].tasks.push(task);
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã: –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ, —Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞, –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã, –±–µ–∑ —Å—Ä–æ–∫–∞
    const sortedGroups = Object.entries(groups).sort(([keyA, groupA], [keyB, groupB]) => {
      if (keyA === 'overdue') return -1;
      if (keyB === 'overdue') return 1;
      if (keyA === 'today') return -1;
      if (keyB === 'today') return 1;
      if (keyA === 'tomorrow') return -1;
      if (keyB === 'tomorrow') return 1;
      if (keyA === 'no-date') return 1;
      if (keyB === 'no-date') return -1;
      return groupA.sortOrder - groupB.sortOrder;
    });

    return sortedGroups;
  }, [tasks]);

  return (
    <div className={`tg-task-list tg-task-list-${theme}`}>
      <h2>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á</h2>
      <DndContext
        sensors={sensors}
        collisionDetection={closestCenter}
        onDragStart={handleDragStart}
        onDragEnd={handleDragEnd}
        onDragCancel={handleDragCancel}
      >
        {groupedTasks.map(([groupKey, group]) => (
          <div key={groupKey} className="task-group">
            <h3 className="task-group-header">{group.label}</h3>
            <SortableContext items={group.tasks.map(t => t.id)} strategy={verticalListSortingStrategy}>
              {group.tasks.map((task) => (
                <SortableTask
                  key={task.id}
                  task={task}
                  onStatusChange={onStatusChange}
                  onDeleteTask={onDeleteTask}
                  onEditTask={onEditTask}
                />
              ))}
            </SortableContext>
          </div>
        ))}
        
        {/* –í–∏–∑—É–∞–ª—å–Ω—ã–π –æ–≤–µ—Ä–ª–µ–π –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏ */}
        <DragOverlay>
          {activeTask ? (
            <div className="tg-task-item dragging-overlay">
              <div className="task-drag-handle">
                <div className="drag-dots">
                  <div className="dot"></div>
                  <div className="dot"></div>
                  <div className="dot"></div>
                  <div className="dot"></div>
                  <div className="dot"></div>
                  <div className="dot"></div>
                </div>
              </div>
              <div className="task-content">
                <div className="task-info">
                  <div className="task-header">
                    <h3 className="task-title">{activeTask.title}</h3>
                  </div>
                </div>
              </div>
            </div>
          ) : null}
        </DragOverlay>
      </DndContext>
    </div>
  );
}

export default TaskList;
