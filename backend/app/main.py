from fastapi import FastAPI, Request, Response, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse
from slowapi import Limiter, _rate_limit_exceeded_handler
from slowapi.util import get_remote_address
from slowapi.errors import RateLimitExceeded
from app.routers import tasks, auth
from app.settings import settings
from app.exceptions import VectoraException
from app.logging_config import logger
from app.security import SecurityHeaders
import time

APP_NAME = settings.app_name
APP_VERSION = settings.app_version

# Rate limiter –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç DDoS
limiter = Limiter(key_func=get_remote_address)

app = FastAPI(
    title=APP_NAME,
    version=APP_VERSION,
    description="Vectora Task Manager API ‚Äî —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –¥–ª—è Telegram Mini App",
    docs_url="/docs",
    redoc_url="/redoc"
)

# –î–æ–±–∞–≤–ª—è–µ–º rate limiter –≤ state
app.state.limiter = limiter
app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º CORS-–æ—Ä–∏–≥–∏–Ω—ã –∫ —Å–ø–∏—Å–∫—É —Å—Ç—Ä–æ–∫ (–≤ .env –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ JSON-–º–∞—Å—Å–∏–≤)
origins_setting = settings.backend_cors_origins
if isinstance(origins_setting, str):
    allow_origins = [o.strip() for o in origins_setting.split(",") if o.strip()]
else:
    allow_origins = origins_setting or []


# Middleware –¥–ª—è CORS –ò security headers - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–ï–†–í–´–ú!
@app.middleware("http")
async def add_cors_and_security_headers(request: Request, call_next):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º preflight OPTIONS –∑–∞–ø—Ä–æ—Å—ã
    if request.method == "OPTIONS":
        response = JSONResponse(content={}, status_code=200)
    else:
        try:
            response = await call_next(request)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ middleware: {str(e)}")
            response = JSONResponse(
                content={"detail": "Internal server error"},
                status_code=500
            )
    
    # –û–¢–õ–ê–î–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞—à –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç
    response.headers["X-Custom-Middleware-Active"] = "YES"
    
    # CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ - –í–†–ï–ú–ï–ù–ù–û —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å—ë
    response.headers["Access-Control-Allow-Origin"] = "*"
    response.headers["Access-Control-Allow-Methods"] = "*"
    response.headers["Access-Control-Allow-Headers"] = "*"
    response.headers["Access-Control-Max-Age"] = "600"
    
    # Security headers
    security_headers = SecurityHeaders.get_secure_headers()
    for header, value in security_headers.items():
        response.headers[header] = value
    
    return response


# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_requests(request: Request, call_next):
    start_time = time.time()
    
    # –õ–æ–≥–∏—Ä—É–µ–º IP –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    client_host = request.client.host if request.client else "unknown"
    logger.info(f"–ó–∞–ø—Ä–æ—Å: {request.method} {request.url.path} –æ—Ç {client_host}")
    
    try:
        response = await call_next(request)
        process_time = time.time() - start_time
        logger.info(f"–û—Ç–≤–µ—Ç: {response.status_code} –∑–∞ {process_time:.3f}s")
        return response
    except Exception as e:
        process_time = time.time() - start_time
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)} –∑–∞ {process_time:.3f}s")
        raise


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.exception_handler(VectoraException)
async def vectora_exception_handler(request: Request, exc: VectoraException):
    logger.warning(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {exc.detail}")
    return JSONResponse(
        status_code=exc.status_code,
        content={"detail": exc.detail}
    )

# Trusted Host Middleware - –∑–∞—â–∏—Ç–∞ –æ—Ç Host header attacks
# –û–¢–ö–õ–Æ–ß–ï–ù–û –¥–ª—è Railway, —Ç–∞–∫ –∫–∞–∫ Railway –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—Ä–æ–∫—Å–∏
# if not settings.debug:
#     app.add_middleware(
#         TrustedHostMiddleware,
#         allowed_hosts=["localhost", "127.0.0.1", "*.railway.app", "*.up.railway.app"]
#     )

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
app.include_router(auth.router)
app.include_router(tasks.router)


@app.on_event("startup")
async def startup_event():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    import os
    logger.info("=" * 60)
    logger.info(f"üöÄ {APP_NAME} v{APP_VERSION} –ù–û–í–ê–Ø –í–ï–†–°–ò–Ø –° CORS!")
    logger.info(f"üìÇ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    logger.info(f"üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {settings.debug}")
    logger.info(f"üìù –§–∞–π–ª main.py –∏–∑–º–µ–Ω—ë–Ω: CORS –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å!")
    logger.info("=" * 60)
    logger.info(f"CORS Origins: {allow_origins}")
    logger.info(f"Database URL: {settings.database_url[:30]}...")


@app.on_event("shutdown")
async def shutdown_event():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger.info(f"{APP_NAME} –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")


@app.get("/health")
def health(response: Response) -> dict:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ (healthcheck)."""
    # –û–¢–õ–ê–î–ö–ê: –¥–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä—è–º–æ –∑–¥–µ—Å—å
    response.headers["Access-Control-Allow-Origin"] = "*"
    response.headers["X-Debug-CORS-Direct"] = "YES"
    return {"status": "ok", "cors_test": "direct_headers"}


@app.get("/version")
def version() -> dict:
    """–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
    return {"name": APP_NAME, "version": APP_VERSION}


@app.get("/")
def root() -> dict:
    """–ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—Å–∫–∞."""
    return {"message": f"{APP_NAME} –∑–∞–ø—É—â–µ–Ω", "version": APP_VERSION}